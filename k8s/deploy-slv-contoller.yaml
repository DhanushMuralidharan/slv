apiVersion: v1
kind: Namespace
metadata:
  name: slv

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: slv-controller
  namespace: slv
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: slv-controller-clusterrole
rules:

  - apiGroups: ["k8s.amagi.com"]
    resources: ["slvs"]  # plural of SLV CRD
    verbs:
      - "watch"
      - "get"
      - "list"

  - apiGroups: [""]
    resources: ["secrets"]
    verbs:
      - "create"
      - "list"
      - "update"
      - "delete" # Delete the secret when corresponding SLV CR is deleted
      - "watch"  # Watching secrets annotated by SLV being modified and reverse sync for reverting to original state.

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: slv-controller-rolebinding
subjects:
- kind: ServiceAccount
  name: slv-controller
  namespace: slv
roleRef:
  kind: ClusterRole
  name: slv-controller-clusterrole
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: slv-controller
  namespace: slv
  labels:
    app: slv-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: slv-controller
  template:
    metadata:
      labels:
        app: slv-controller
    spec:
      serviceAccountName: slv-controller
      containers:
      - name: slv-controller
        image: ghcr.io/amagimedia/slv/k8slv:latest # Use the version tag corresponding to the version of SLV used with the CR
        resources:
          limits:
            cpu: "1" # 1 CPU should be fairly enough for SLV Controller
            memory: "1Gi" # 1Gi is the minimum memory requirement for SLV Controller
        env:
          - name: SLV_SECRET_KEY
            valueFrom: # SLV Environment Secret Key taken from K8s secret
              secretKeyRef:
                name: slv-environment-secret # Name of K8 Secret
                key: slvEnvironmentSecret  # Key within K8 Secret
          - name: SLV_ACCESS_BINDING
            value: "SLV_PAB_PROVIDERACCESSBINDINGGOESHERE" # Ensure the appropriate KMS role is attached to the K8s Service Account