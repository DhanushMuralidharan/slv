---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.13.0
  name: slvs.k8s.amagi.com
spec:
  group: k8s.amagi.com
  names:
    kind: SLV
    listKind: SLVList
    plural: slvs
    singular: slv
  scope: Namespaced
  versions:
  - name: v1
    schema:
      openAPIV3Schema:
        description: SLV is the Schema for the slv API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          slvConfig:
            properties:
              hashLength:
                format: int32
                type: integer
              publicKey:
                type: string
              wrappedKeys:
                items:
                  type: string
                type: array
            required:
            - publicKey
            - wrappedKeys
            type: object
          slvSecrets:
            additionalProperties:
              type: string
            type: object
          status:
            description: SLVStatus defines the observed state of SLV
            type: object
        required:
        - metadata
        - slvConfig
        - slvSecrets
        type: object
    served: true
    storage: true
    subresources:
      status: {}

---
apiVersion: v1
kind: Namespace
metadata:
  name: slv

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: slv-controller
  namespace: slv
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: slv-controller-clusterrole
rules:

  - apiGroups: ["k8s.amagi.com"]
    resources: ["slvs"]  # plural of SLV CRD
    verbs:
      - "watch"
      - "get"
      - "list"

  - apiGroups: [""]
    resources: ["secrets"]
    verbs:
      - "create"
      - "list"
      - "update"
      - "delete" # Delete the secret when corresponding SLV CR is deleted
      - "watch"  # Watching secrets annotated by SLV being modified and reverse sync for reverting to original state.

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: slv-controller-rolebinding
subjects:
- kind: ServiceAccount
  name: slv-controller
  namespace: slv
roleRef:
  kind: ClusterRole
  name: slv-controller-clusterrole
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: slv-controller
  namespace: slv
  labels:
    app: slv-controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app: slv-controller
  template:
    metadata:
      labels:
        app: slv-controller
    spec:
      serviceAccountName: slv-controller
      containers:
      - name: slv-controller
        image: ghcr.io/amagimedia/slv/k8slv:main # Use the specific version tag (main branch releases might be unstable) corresponding to the version of SLV used with the CR
        resources:
          limits:
            cpu: "1" # 1 CPU should be fairly enough for SLV Controller
            memory: "1Gi" # 1Gi is the minimum memory requirement for SLV Controller
        env:
          - name: SLV_ACCESS_BINDING
            value: "SLV_PAB_PROVIDERACCESSBINDINGGOESHERE" # Ensure the appropriate KMS role is attached to the K8s Service Account
          - name: SLV_SECRET_KEY
            valueFrom: # SLV Environment Secret Key taken from K8s secret
              secretKeyRef:
                name: slv # Name of K8 Secret
                key: secretkey  # Key within K8 Secret